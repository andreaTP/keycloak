name: Keycloak Operator CI

on:
  push:
    branches-ignore: [main]
  pull_request:
  schedule:
    - cron: '0 0 * * *'

env:
  JDK_VERSION: 11
  MINIKUBE_VERSION: "v1.24.0"
  KUBERNETES_VERSION: "v1.22.3"

concurrency:
  # Only run once for latest commit per ref and cancel other (previous) runs.
  group: ci-operator-keycloak-${{ github.ref }}
  cancel-in-progress: true

# WARNING:
# ttl.sh images with unparseable duration will default to 1 hour expiration:
# https://github.com/replicatedhq/ttl.sh/blob/7b35b763042cf5cca80058897b2ed3f929cfa289/hooks/src/controllers/HookAPI.ts#L53

jobs:
  build:
    name: Build distribution
    if: ${{ ( github.event_name != 'schedule' ) || ( github.event_name == 'schedule' && github.repository == 'keycloak/keycloak' ) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set outputs
        id: vars
        run: echo "::set-output name=version::0.0.1-$(git rev-parse --short HEAD)"
      - name: Update maven settings
        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'
      - name: Create the Keycloak distribution
        run: |
          mvn clean install -Pdistribution -DskipTests -DskipExamples -DskipTestsuite
      - name: Store Keycloak distribution
        id: store-keycloak
        uses: actions/upload-artifact@v3
        with:
          name: keycloak-distribution
          retention-days: 1
          path: quarkus/dist/target/keycloak*.tar.gz

  test-local:
    name: Test local
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Set outputs
        id: vars
        run: echo "::set-output name=version::0.0.1-$(git rev-parse --short HEAD)"
      - name: Update maven settings
        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'
      - name: Setup Minikube-Kubernetes
        uses: manusa/actions-setup-minikube@v2.4.3
        with:
          minikube version: ${{ env.MINIKUBE_VERSION }}
          kubernetes version: ${{ env.KUBERNETES_VERSION }}
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
          start args: '--addons=ingress'
      - name: Download keycloak distribution
        id: download-keycloak-dist
        uses: actions/download-artifact@v3
        with:
          name: keycloak-distribution
          path: quarkus/container
      - name: Build Keycloak Docker images
        working-directory: quarkus/container
        run: |
          eval $(minikube -p minikube docker-env)
          docker build --build-arg KEYCLOAK_DIST=$(ls keycloak-*.tar.gz) . -t keycloak:${{ steps.vars.outputs.version }}
          ./scripts/build-testing-docker-images.sh ${{ steps.vars.outputs.version }} custom-keycloak

      - name: Test operator running locally
        working-directory: operator
        run: |
          mvn clean verify \
              -Dquarkus.kubernetes.deployment-target=kubernetes \
              -Doperator.keycloak.image=keycloak:${{ steps.vars.outputs.version }} \
              -Dtest.operator.custom.image=custom-keycloak:${{ steps.vars.outputs.version }} \
              -Doperator.keycloak.image-pull-policy=Never \
              -Dtest.operator.kubernetes.ip=$(minikube ip)

  test-remote:
    name: Test remote
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Set outputs
        id: vars
        run: echo "::set-output name=version::0.0.1-$(git rev-parse --short HEAD)"
      - name: Update maven settings
        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'
      - name: Setup Minikube-Kubernetes
        uses: manusa/actions-setup-minikube@v2.4.3
        with:
          minikube version: ${{ env.MINIKUBE_VERSION }}
          kubernetes version: ${{ env.KUBERNETES_VERSION }}
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
          start args: '--addons=ingress'
      - name: Download keycloak distribution
        id: download-keycloak-dist
        uses: actions/download-artifact@v3
        with:
          name: keycloak-distribution
          path: quarkus/container
      - name: Build Keycloak Docker images
        working-directory: quarkus/container
        run: |
          eval $(minikube -p minikube docker-env)
          docker build --build-arg KEYCLOAK_DIST=$(ls keycloak-*.tar.gz) . -t keycloak:${{ steps.vars.outputs.version }}
          ./scripts/build-testing-docker-images.sh ${{ steps.vars.outputs.version }} custom-keycloak

      - name: Test operator running in cluster
        working-directory: operator
        run: |
          eval $(minikube -p minikube docker-env)
          mvn clean verify \
              -Dquarkus.container-image.build=true \
              -Dquarkus.kubernetes.deployment-target=kubernetes \
              -Dquarkus.jib.jvm-arguments="-Djava.util.logging.manager=org.jboss.logmanager.LogManager","-Doperator.keycloak.image=keycloak:${{ steps.vars.outputs.version }}" \
              -Dtest.operator.custom.image=custom-keycloak:${{ steps.vars.outputs.version }} \
              -Doperator.keycloak.image-pull-policy=Never \
              --no-transfer-progress -Dtest.operator.deployment=remote \
              -Dtest.operator.kubernetes.ip=$(minikube ip)

  test-olm:
    name: Test OLM installation
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Set outputs
        id: vars
        run: echo "::set-output name=version::0.0.1-$(git rev-parse --short HEAD)"
      - name: Update maven settings
        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'
      - name: Setup Minikube-Kubernetes
        uses: manusa/actions-setup-minikube@v2.4.3
        with:
          minikube version: ${{ env.MINIKUBE_VERSION }}
          kubernetes version: ${{ env.KUBERNETES_VERSION }}
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
      - name: Download keycloak distribution
        id: download-keycloak-dist
        uses: actions/download-artifact@v3
        with:
          name: keycloak-distribution
          path: quarkus/container
      - name: Build and push the Keycloak Docker image
        working-directory: quarkus/container
        run: |
          docker build --build-arg KEYCLOAK_DIST=$(ls keycloak-*.tar.gz) . -t ttl.sh/${GITHUB_SHA::6}keycloak:${{ steps.vars.outputs.version }}
          docker push ttl.sh/${GITHUB_SHA::6}keycloak:${{ steps.vars.outputs.version }}
      - name: Build and push a custom pre-augmented Keycloak Docker image
        working-directory: operator
        run: |
          ./scripts/build-testing-docker-images.sh ${{ steps.vars.outputs.version }} ttl.sh/${GITHUB_SHA::6}keycloak ttl.sh/${GITHUB_SHA::6}custom-keycloak
          docker push ttl.sh/${GITHUB_SHA::6}custom-keycloak:${{ steps.vars.outputs.version }}  
      - name: Build and push the operator image
        working-directory: operator
        run: |
          eval $(minikube -p minikube docker-env)
          mvn clean package \
              -Dquarkus.container-image.build=true \
              -Dquarkus.container-image.push=true \
              -Dquarkus.container-image.image="ttl.sh/${GITHUB_SHA::6}keycloak-operator:${{ steps.vars.outputs.version }}" \
              -DskipTests

      - name: Install OPM
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "github"
          opm: "1.21.0"
      
      - name: Install Yq
        run: sudo snap install yq

      - name: Install OLM
        working-directory: operator
        run: ./scripts/install-olm.sh

      - name: Prepare resources for testing on OLM
        working-directory: operator
        run: |
          eval $(minikube -p minikube docker-env)
          ./scripts/prepare-olm-test.sh ttl.sh ${{ steps.vars.outputs.version }} NONE ${GITHUB_SHA::6}

      - name: Install the operator with OLM
        working-directory: operator
        run: ./scripts/install-keycloak-operator.sh

      - name: Deploy an example Keycloak and wait for it to be ready
        working-directory: operator
        run: |
          kubectl apply -f src/main/resources/example-postgres.yaml
          ./scripts/check-crds-installed.sh
          kubectl apply -f src/main/resources/example-keycloak.yml
          kubectl apply -f src/main/resources/example-realm.yaml
          # Wait for the CRs to be ready
          ./scripts/check-examples-installed.sh
