name: Keycloak Operator CI

on:
  push:
    branches-ignore: [main]
  pull_request:
  schedule:
    - cron: '0 0 * * *'

env:
  JDK_VERSION: 11

concurrency:
  # Only run once for latest commit per ref and cancel other (previous) runs.
  group: ci-operator-keycloak-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    if: ${{ ( github.event_name != 'schedule' ) || ( github.event_name == 'schedule' && github.repository == 'keycloak/keycloak' ) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Update maven settings
        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_VERSION }}
      - name: Cache Maven packages
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
          key: cache-1-${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: cache-1-${{ runner.os }}-m2

      - name: Create the Keycloak distribution
        run: |
          mvn clean install -Pdistribution -DskipTests -DskipExamples -DskipTestsuite

      - name: Setup Minikube-Kubernetes
        uses: manusa/actions-setup-minikube@v2.4.3
        with:
          minikube version: v1.24.0
          kubernetes version: v1.22.3
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
          start args: "--addons=ingress"

      - name: Build the Keycloak Docker image
        run: |
          cd quarkus
          cp dist/target/keycloak-*.tar.gz container/
          cd container
          eval $(minikube -p minikube docker-env)
          docker build --label "quay.expires-after=20h" --build-arg KEYCLOAK_DIST=$(ls keycloak-*.tar.gz) . -t keycloak:${GITHUB_SHA}

      # - name: Test operator running locally
      #   working-directory: operator
      #   run: |
      #     mvn clean verify \
      #         -Dquarkus.kubernetes.deployment-target=kubernetes \
      #         -Doperator.keycloak.image=keycloak:${GITHUB_SHA} \
      #         -Doperator.keycloak.image-pull-policy=Never \
      #         -Dtest.operator.kubernetes.ip=$(minikube ip)

      # - name: Test operator running in cluster
      #   working-directory: operator
      #   run: |
      #     eval $(minikube -p minikube docker-env)
      #     mvn clean verify \
      #         -Dquarkus.container-image.build=true \
      #         -Dquarkus.container-image.labels."\"quay.expires-after\""="20h" \
      #         -Dquarkus.kubernetes.deployment-target=kubernetes \
      #         -Dquarkus.jib.jvm-arguments="-Djava.util.logging.manager=org.jboss.logmanager.LogManager","-Doperator.keycloak.image=keycloak:${GITHUB_SHA}","-Doperator.keycloak.image-pull-policy=Never" \
      #         --no-transfer-progress -Dtest.operator.deployment=remote \
      #         -Dtest.operator.kubernetes.ip=$(minikube ip)

      # TODO: remove me - temporary to reduce CI time
      - name: Test operator running in cluster
        working-directory: operator
        run: |
          eval $(minikube -p minikube docker-env)
          mvn clean verify \
              -Dquarkus.container-image.build=true \
              -Dquarkus.container-image.labels."\"quay.expires-after\""="20h" \
              -Dquarkus.kubernetes.deployment-target=kubernetes \
              -Dquarkus.jib.jvm-arguments="-Djava.util.logging.manager=org.jboss.logmanager.LogManager","-Doperator.keycloak.image=keycloak:${GITHUB_SHA}","-Doperator.keycloak.image-pull-policy=Never" \
              -DskipTests
          # TODO check if this is really needed
          # probably not
          kubectl apply -f target/kubernetes/keycloaks.keycloak.org-v1.yml
          kubectl apply -f target/kubernetes/keycloakrealmimports.keycloak.org-v1.yml

      # Test the OLM bundle
      - name: Install OPM
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "github"
          opm: "1.21.0"
          operator-sdk: "1.18.1"
      
      - name: Install Yq
        run: sudo snap install yq

      - name: Install Operator Lifecycle Manager using Operator SDK
        run: operator-sdk olm install

      # - name: Install the operator CRDs
      #   run: |
      #     kubectl apply -f operator/target/kubernetes/keycloaks.keycloak.org-v1.yml
      #     kubectl apply -f operator/target/kubernetes/keycloakrealmimports.keycloak.org-v1.yml

      - name: Login to docker registry
        uses: docker/login-action@v1.14.1
        with:
          registry: ${{ secrets.TEST_DOCKER_REGISTRY }}
          username: ${{ secrets.TEST_DOCKER_USERNAME }}
          password: ${{ secrets.TEST_DOCKER_TOKEN }}

      - name: Re-tag and push docker images
        run: |
          VERSION=0.0.1-${GITHUB_RUN_ID}
          eval $(minikube -p minikube docker-env)
          docker tag keycloak/keycloak-operator:999-SNAPSHOT ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_USERNAME }}/keycloak-operator:${VERSION}
          docker push ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_USERNAME }}/keycloak-operator:${VERSION}
          docker tag keycloak:${GITHUB_SHA} ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_USERNAME }}/keycloak:${VERSION}
          docker push ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_USERNAME }}/keycloak:${VERSION}

      - name: Prepare resources for testing on OLM
        working-directory: operator
        run: |
          VERSION=0.0.1-${GITHUB_RUN_ID}
          eval $(minikube -p minikube docker-env)
          ./scripts/prepare-olm-test.sh ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_USERNAME }} ${VERSION} 0.0.1

      # DEBUG
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      - name: Install the operator with OLM
        working-directory: operator
        run: ./scripts/install-keycloak-operator.sh

      - name: Deploy an example Keycloak and wait for it to be ready
        run: |
          kubectl apply -f src/main/resources/example-postgres.yaml
          kubectl apply -f src/main/resources/example-keycloak.yml
          kubectl wait --for=condition=available --timeout=600s deployment/example-kc
