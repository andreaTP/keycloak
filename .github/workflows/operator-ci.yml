name: Keycloak Operator CI

on:
  push:
    branches-ignore: [main]
  pull_request:
  schedule:
    - cron: '0 0 * * *'

env:
  JDK_VERSION: 11

concurrency:
  # Only run once for latest commit per ref and cancel other (previous) runs.
  group: ci-operator-keycloak-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build distribution
    if: ${{ ( github.event_name != 'schedule' ) || ( github.event_name == 'schedule' && github.repository == 'keycloak/keycloak' ) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set outputs
        id: vars
        run: echo "::set-output name=version::0.0.1-$(git rev-parse --short HEAD)"
      - name: Update maven settings
        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'
      - name: Create the Keycloak distribution
        run: |
          mvn clean install -Pdistribution -DskipTests -DskipExamples -DskipTestsuite
      - name: Build and save the Keycloak Docker image
        working-directory: quarkus/container
        run: |
          cp ../dist/target/keycloak-*.tar.gz ./
          docker build --build-arg KEYCLOAK_DIST=$(ls keycloak-*.tar.gz) . -t keycloak:${{ steps.vars.outputs.version }}
          docker save keycloak:${{ steps.vars.outputs.version }} > ~/keycloak.tar
      - name: Build and save a custom pre-augmented Keycloak Docker image
        working-directory: operator
        run: |
          ./scripts/build-testing-docker-images.sh ${{ steps.vars.outputs.version }} keycloak custom-keycloak
          docker save custom-keycloak:${{ steps.vars.outputs.version }} > ~/custom-keycloak.tar

      - name: Store Keycloak containers
        id: store-keycloak-containers
        uses: actions/upload-artifact@v3
        with:
          name: keycloak-containers
          retention-days: 1
          path: |
            ~/keycloak.tar
            ~/custom-keycloak.tar


      # - name: Build and push the Keycloak Docker image
      #   working-directory: quarkus/container
      #   run: |
      #     cp ../dist/target/keycloak-*.tar.gz ./
      #     docker build --label "quay.expires-after=20h" --build-arg KEYCLOAK_DIST=$(ls keycloak-*.tar.gz) . -t ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_REPOSITORY }}/keycloak:${{ steps.vars.outputs.version }}
      #     docker push ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_REPOSITORY }}/keycloak:${{ steps.vars.outputs.version }}
      # - name: Build and push a custom pre-augmented Keycloak Docker image
      #   working-directory: operator
      #   run: |
      #     ./scripts/build-testing-docker-images.sh ${{ steps.vars.outputs.version }} ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_REPOSITORY }}/keycloak ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_REPOSITORY }}/custom-keycloak
      #     docker push ${{ secrets.TEST_DOCKER_REGISTRY }}/${{ secrets.TEST_DOCKER_REPOSITORY }}/custom-keycloak:${{ steps.vars.outputs.version }}

  test-local:
    name: Test local
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Set outputs
        id: vars
        run: echo "::set-output name=version::0.0.1-$(git rev-parse --short HEAD)"
      - name: Update maven settings
        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'
      - name: Setup Minikube-Kubernetes
        uses: manusa/actions-setup-minikube@v2.4.3
        with:
          minikube version: v1.24.0
          kubernetes version: v1.22.3
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
          start args: '--addons=ingress'
      - name: Download keycloak containers
        id: download-keycloak-containers
        uses: actions/download-artifact@v3
        with:
          name: keycloak-containers

      - name: Import Keycloak Container images
        run: |
          eval $(minikube -p minikube docker-env)
          cat keycloak.tar | docker import - keycloak:${{ steps.vars.outputs.version }}
          cat custom-keycloak.tar | docker import - custom-keycloak:${{ steps.vars.outputs.version }}

      - name: Test operator running locally
        working-directory: operator
        run: |
          mvn clean verify \
              -Dquarkus.kubernetes.deployment-target=kubernetes \
              -Doperator.keycloak.image=keycloak:${{ steps.vars.outputs.version }} \
              -Doperator.keycloak.image-pull-policy=Never \
              -Dtest.operator.custom.image=custom-keycloak:${{ steps.vars.outputs.version }} \
              -Dtest.operator.kubernetes.ip=$(minikube ip)

  test-remote:
    name: Test remote
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Set outputs
        id: vars
        run: echo "::set-output name=version::0.0.1-$(git rev-parse --short HEAD)"
      - name: Update maven settings
        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'
      - name: Setup Minikube-Kubernetes
        uses: manusa/actions-setup-minikube@v2.4.3
        with:
          minikube version: v1.24.0
          kubernetes version: v1.22.3
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
          start args: '--addons=ingress'
      - name: Download keycloak containers
        id: download-keycloak-containers
        uses: actions/download-artifact@v3
        with:
          name: keycloak-containers

      - name: Import Keycloak Container images
        run: |
          eval $(minikube -p minikube docker-env)
          cat keycloak.tar | docker import - keycloak:${{ steps.vars.outputs.version }}
          cat custom-keycloak.tar | docker import - custom-keycloak:${{ steps.vars.outputs.version }}

      - name: Test operator running in cluster
        working-directory: operator
        run: |
          eval $(minikube -p minikube docker-env)
          mvn clean verify \
              -Dquarkus.container-image.build=true \
              -Dquarkus.kubernetes.deployment-target=kubernetes \
              -Dquarkus.jib.jvm-arguments="-Djava.util.logging.manager=org.jboss.logmanager.LogManager","-Doperator.keycloak.image=keycloak:${{ steps.vars.outputs.version }}","-Doperator.keycloak.image-pull-policy=Never" \
              -Dtest.operator.custom.image=custom-keycloak:${{ steps.vars.outputs.version }} \
              --no-transfer-progress -Dtest.operator.deployment=remote \
              -Dtest.operator.kubernetes.ip=$(minikube ip)

  test-olm:
    name: Test OLM installation
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Set outputs
        id: vars
        run: echo "::set-output name=version::0.0.1-$(git rev-parse --short HEAD)"
      - name: Update maven settings
        run: mkdir -p ~/.m2 ; cp .github/settings.xml ~/.m2/
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'
      - name: Setup Minikube-Kubernetes
        uses: manusa/actions-setup-minikube@v2.4.3
        with:
          minikube version: v1.24.0
          kubernetes version: v1.22.3
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker
          start args: '--addons=registry'
      - name: Download keycloak containers
        id: download-keycloak-containers
        uses: actions/download-artifact@v3
        with:
          name: keycloak-containers

      - name: Set registry IP
        id: registry
        # https://github.com/kubernetes/minikube/issues/6982#issuecomment-597350088
        run: echo "::set-output name=ip::$(kubectl get svc registry --output=jsonpath='{.spec.clusterIP}' --namespace=kube-system)"

      - name: Import Keycloak Container images
        run: |
          cat keycloak.tar | docker import - localhost:5000/keycloak:${{ steps.vars.outputs.version }}
          docker push localhost:5000/keycloak:${{ steps.vars.outputs.version }}

      - name: Build and push the operator image
        working-directory: operator
        run: |
          mvn clean package \
              -Dquarkus.container-image.build=true \
              -Dquarkus.container-image.push=true \
              -Dquarkus.container-image.image="localhost:5000/keycloak-operator:${{ steps.vars.outputs.version }}" \
              -DskipTests

      - name: Install OPM
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "github"
          opm: "1.21.0"
      
      - name: Install Yq
        run: sudo snap install yq

      - name: Install OLM
        working-directory: operator
        run: ./scripts/install-olm.sh

      - name: Prepare resources for testing on OLM
        working-directory: operator
        run: |
          ./scripts/prepare-olm-test.sh localhost:5000 ${{ steps.vars.outputs.version }} NONE

      - name: Install the operator with OLM
        working-directory: operator
        run: ./scripts/install-keycloak-operator.sh

      - name: Deploy an example Keycloak and wait for it to be ready
        working-directory: operator
        run: |
          kubectl apply -f src/main/resources/example-postgres.yaml
          ./scripts/check-crds-installed.sh
          kubectl apply -f src/main/resources/example-keycloak.yml
          kubectl apply -f src/main/resources/example-realm.yaml
          # Wait for the CRs to be ready
          ./scripts/check-examples-installed.sh
